<%- include('partials/header', {
  title: 'Connexion',
  bodyClass: 'login-body',
  containerClass: 'login-container',
  headerClass: 'login-header',
  navClass: '',
  showNav: false,
  currentPage: 'login'
}) %>

<div class="row justify-content-center mt-5">
  <div class="col-md-6">
    <div class="card shadow">
      <div class="card-header bg-primary text-white text-center">
        <img src="/static/img/company_logo.png" alt="<%= process.env.COMPANY_NAME %> Logo" class="mb-3 header-logo" style="max-width: 150px;">
        <h1 class="h4 py-1">Connexion</h1>
      </div>
      <div class="card-body">
        <% if (error) { %>
          <div class="alert alert-danger" role="alert">
            <%= error %>
          </div>
        <% } %>
        <div id="loginAttemptsAlert" class="alert alert-warning d-none" role="alert">
          <i class="fas fa-exclamation-triangle"></i>
          <span id="loginAttemptsMessage"></span>
        </div>
        <form id="loginForm" action="/auth/login" method="POST">
          <div class="form-group">
            <label for="username">
              <i class="fas fa-user"></i> Nom d'utilisateur
            </label>
            <input type="text" class="form-control" id="username" name="username" required>
          </div>
          <div class="form-group">
            <label for="password">
              <i class="fas fa-lock"></i> Mot de passe
            </label>
            <div class="input-group">
              <input type="password" class="form-control" id="password" name="password" required>
              <div class="input-group-append" style="cursor: pointer;">
                <span class="input-group-text"><i class="fas fa-eye" id="togglePassword"></i></span>
              </div>
            </div>
          </div>
          <div class="my-3">
            <button type="submit" id="loginButton" class="btn btn-primary btn-block">
              <i class="fas fa-sign-in-alt"></i> Se connecter
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
const MAX_LOGIN_ATTEMPTS = 3;
const LOCKOUT_TIME = 15 * 60 * 1000; // 15 minutes in milliseconds

function checkLoginAttempts() {
  const username = document.getElementById('username').value;
  if (!username) return true;
  
  const attemptsKey = `loginAttempts_${username}`;
  const attempts = JSON.parse(localStorage.getItem(attemptsKey) || '{"count": 0}');
  
  if (attempts.lockoutUntil && attempts.lockoutUntil > Date.now()) {
    const waitTime = Math.ceil((attempts.lockoutUntil - Date.now()) / 60000);
    showLoginAlert(`Account is locked. Please try again in ${waitTime} minutes.`, true);
    return false;
  }
  
  if (attempts.lockoutUntil && attempts.lockoutUntil <= Date.now()) {
    localStorage.removeItem(attemptsKey);
    hideLoginAlert();
    return true;
  }
  
  const remainingAttempts = MAX_LOGIN_ATTEMPTS - attempts.count;
  if (remainingAttempts < MAX_LOGIN_ATTEMPTS && remainingAttempts > 0) {
    showLoginAlert(`${remainingAttempts} login attempts remaining.`, false);
  }
  
  return true;
}

function recordFailedAttempt(username) {
  const attemptsKey = `loginAttempts_${username}`;
  const attempts = JSON.parse(localStorage.getItem(attemptsKey) || '{"count": 0}');
  attempts.count += 1;
  
  if (attempts.count >= MAX_LOGIN_ATTEMPTS) {
    attempts.lockoutUntil = Date.now() + LOCKOUT_TIME;
  }
  
  localStorage.setItem(attemptsKey, JSON.stringify(attempts));
  return MAX_LOGIN_ATTEMPTS - attempts.count;
}

function showLoginAlert(message, isLocked) {
  const alert = document.getElementById('loginAttemptsAlert');
  const loginButton = document.getElementById('loginButton');
  const msg = document.getElementById('loginAttemptsMessage');
  
  alert.classList.remove('d-none');
  msg.textContent = message;
  
  if (isLocked) {
    loginButton.disabled = true;
    loginButton.classList.add('opacity-50');
  }
}

function hideLoginAlert() {
  const alert = document.getElementById('loginAttemptsAlert');
  const loginButton = document.getElementById('loginButton');
  
  alert.classList.add('d-none');
  loginButton.disabled = false;
  loginButton.classList.remove('opacity-50');
}

document.getElementById('loginForm').addEventListener('submit', function(e) {
  const username = document.getElementById('username').value;
  if (!checkLoginAttempts()) {
    e.preventDefault();
    return;
  }
  
  // Store the username for checking the response
  sessionStorage.setItem('lastLoginAttempt', username);
});

// Check for failed login response
if ('<%= error %>' && sessionStorage.getItem('lastLoginAttempt')) {
  const username = sessionStorage.getItem('lastLoginAttempt');
  const remaining = recordFailedAttempt(username);
  if (remaining <= 0) {
    checkLoginAttempts();
  }
  sessionStorage.removeItem('lastLoginAttempt');
}

// Password toggle functionality
document.getElementById('togglePassword').addEventListener('click', function() {
  const passwordInput = document.getElementById('password');
  passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
});

// Initial check on page load
document.getElementById('username').addEventListener('input', checkLoginAttempts);
</script>

<%- include('partials/footer', {
  showScripts: false,
  customScripts: []
}) %>
